name: ci
on:
  pull_request:
  push:
    branches:
      - testci

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
          - ubuntu-22.04
          - macos-12
        compiler:
          - llvm
          - gcc
          # you can specify the version after `-` like `llvm-13.0.0`.
        include:
          - os: "windows-2022"
            compiler: "msvc"
    steps:
      - uses: actions/checkout@v3
      - name: install wget on windows-2022
        if: ${{ contains(matrix.os, 'windows') }}
        run: |
          choco install wget
      - name: replace vcpkg.json on macos
        run: |
          cat vcpkg.json
          mv vcpkg.json _vcpkg.json
          sed  '/llvm/d' _vcpkg.json > vcpkg.json
          cat vcpkg.json
          rm -f _vcpkg.json
        if: ${{ contains(matrix.os, 'macos') }}
      - name: replace vcpkg.json on ubuntu
        run: |
          sed -i '/llvm/d' vcpkg.json
        if: ${{ contains(matrix.os, 'ubuntu') }} || ${{ contains(matrix.os, 'windows') }}
      - name: download libclang binary
        run: |
          cat vcpkg.json
          mkdir -p build/fetched
          cd build/fetched
          wget -c https://github.com/mall1/CppGen/releases/download/libclang/libclang-bin.tar -O - | tar -xv
          ls libclang-bin
          cd libclang-bin/LLVM
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/vcpkg
            ./build/vcpkg_installed
            ${{ env.HOME }}/.cache/vcpkg/archives
            ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
            ${{ env.LOCALAPPDATA }}\vcpkg\archives
            ${{ env.APPDATA }}\vcpkg\archives
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ env.BUILD_TYPE }}-${{ hashFiles('./vcpkg.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ env.BUILD_TYPE }}-

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true
          vcpkg: true
          cppcheck: true
          clangtidy: true # instead of `true`, which chooses the default version, you can pass a specific version.
          # ...
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=~/vcpkg/scripts/buildsystems/vcpkg.cmake -DHACK_USE_LIBCLANG_BINARY=ON
      - name: Build
        # Build your program with the given configuration
        run: cmake --build build
